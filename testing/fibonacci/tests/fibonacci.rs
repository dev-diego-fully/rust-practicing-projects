/// Verifies that the first ten numbers of the Fibonacci sequence generated by
/// the iterator are correct and in the expected order.
#[test]
fn first_ten_fibonacci_number() {
    let expected = vec![0, 1, 1, 2, 3, 5, 8, 13, 21, 34];
    let current: Vec<i64> = fibonacci::serie().take(10).collect();

    assert_eq!(expected, current)
}

/// Tests the iterator's behavior when it encounters an integer overflow.
///
/// It asserts that the iterator correctly stops after producing the 93rd
/// Fibonacci number, which is the last one that fits within the `i64` type's
/// limit.
#[test]
fn outputs_only_the_first_93_numers_starting_with_0th() {
    let expected_len = 93;
    let current_len = fibonacci::serie().take(100).count();

    assert_eq!(expected_len, current_len);
}